{
	"info": {
		"_postman_id": "29c5598f-4272-4561-b942-1c2c9e3c8cf9",
		"name": "Gruppe19_NGK_Assignment3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"ey\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json;charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"pm.response.to.have.status(200);\r",
							"let res = pm.response.json();\r",
							"pm.collectionVariables.set(\"JwtToken\", res.jwt );\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Email\" : \"Unknown@Person.dk\",\r\n    \"Password\" : \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:44313/api/Account/login",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44313",
					"path": [
						"api",
						"Account",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "AddObservation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"date\": \"2025-05-10T12:34:56.817Z\",\r\n  \"location\": {\r\n    \"name\": \"Roskilde\",\r\n    \"lat\": 0,\r\n    \"lon\": 0\r\n  },\r\n  \"temperature\": 0,\r\n  \"humidity\": 0,\r\n  \"airPressure\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:44313/api/WeatherObservations",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44313",
					"path": [
						"api",
						"WeatherObservations"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetLast3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Get last Obersvation is correct\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData[0].location.name).to.eql(\"Roskilde\");\r",
							"    });\r",
							"\r",
							"pm.test(\"Get last 3 returns 3 Obersvations\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.length).to.eql(3);\r",
							"    });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://localhost:44313/Last3",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44313",
					"path": [
						"Last3"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetByDate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Get last Obersvation is correct\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData[0].location.name).to.eql(\"Roskilde\");\r",
							"    });\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"2025-05-10\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:44313/ByDate?date=2025-05-10",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44313",
					"path": [
						"ByDate"
					],
					"query": [
						{
							"key": "date",
							"value": "2025-05-10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBetweenDates",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "Get",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		},
		{
			"name": "Register",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://localhost:44313/api/Account/register",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "44313",
					"path": [
						"api",
						"Account",
						"register"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{JwtToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "JwtToken",
			"value": "ThisIsNULL"
		}
	]
}